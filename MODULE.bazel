bazel_dep(name = "aspect_bazel_lib", version = "2.8.1")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "platforms", version = "0.0.8")
bazel_dep(name = "protobuf", version = "28.0-rc2", repo_name = "com_google_protobuf")
bazel_dep(name = "rules_oci", version = "1.7.6")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "rules_proto", version = "6.0.2")
# -- bazel_dep definitions -- #

non_module_deps = use_extension("//:non_module_deps.bzl", "non_module_deps")
use_repo(non_module_deps, "bazel_gomock")
use_repo(non_module_deps, "kubernetes_helm")
use_repo(non_module_deps, "kubernetes_helm3")
use_repo(non_module_deps, "hashicorp_terraform")
use_repo(non_module_deps, "com_github_kubernetes_sigs_application")
use_repo(non_module_deps, "ingress-nginx")
# End of extension `non_module_deps`

# C++
bazel_dep(name = "toolchains_llvm", version = "1.1.2")

# Inspect supported toolchains at https://github.com/bazel-contrib/toolchains_llvm/blob/master/toolchain/internal/llvm_distributions.bzl
llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(
    llvm_version = "18.1.4",
)

use_repo(non_module_deps, "com_googleapis_storage_chrome_linux_amd64_sysroot")

llvm.sysroot(
    label = "@com_googleapis_storage_chrome_linux_amd64_sysroot//:all_files",
    targets = ["linux-x86_64"],
)
use_repo(llvm, "llvm_toolchain")

register_toolchains("@llvm_toolchain//:all")

bazel_dep(name = "rules_cc", version = "0.0.9")

# GO
bazel_dep(name = "rules_go", version = "0.50.1", repo_name = "io_bazel_rules_go")

go_sdk = use_extension("@io_bazel_rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.23.0")

bazel_dep(name = "gazelle", version = "0.38.0", repo_name = "bazel_gazelle")

go_deps = use_extension("@bazel_gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//src:go.mod")
use_repo(
    go_deps,
    "com_github_cenkalti_backoff",
    "com_github_form3tech_oss_jwt_go",
    "com_github_fsnotify_fsnotify",
    "com_github_getlantern_httptest",
    "com_github_golang_glog",
    "com_github_golang_mock",
    "com_github_google_go_cmp",
    "com_github_googlecloudrobotics_ilog",
    "com_github_motemen_go_loghttp",
    "com_github_onsi_gomega",
    "com_github_pkg_errors",
    "com_github_prometheus_client_golang",
    "com_github_spf13_cobra",
    "com_github_spf13_pflag",
    "com_google_cloud_go_storage",
    "in_gopkg_h2non_gock_v1",
    "io_k8s_api",
    "io_k8s_apiextensions_apiserver",
    "io_k8s_apimachinery",
    "io_k8s_cli_runtime",
    "io_k8s_client_go",
    "io_k8s_helm",
    "io_k8s_klog",
    "io_k8s_klog_v2",
    "io_k8s_sigs_controller_runtime",
    "io_k8s_sigs_kind",
    "io_k8s_sigs_yaml",
    "io_opencensus_go",
    "io_opencensus_go_contrib_exporter_prometheus",
    "io_opencensus_go_contrib_exporter_stackdriver",
    "org_golang_google_api",
    "org_golang_google_grpc",
    "org_golang_google_protobuf",
    "org_golang_x_crypto",
    "org_golang_x_net",
    "org_golang_x_oauth2",
    "org_golang_x_sync",
)

bazel_lib_toolchains = use_extension("@aspect_bazel_lib//lib:extensions.bzl", "toolchains")
use_repo(
    bazel_lib_toolchains,
    "copy_directory_toolchains",
    "jq_toolchains",
)

register_toolchains(
    "@copy_directory_toolchains//:all",
    "@jq_toolchains//:all",
)

extension_for_rules_oci = use_extension("//:extension_for_rules_oci.bzl", "extension_for_rules_oci")
use_repo(extension_for_rules_oci, "distroless_base")
use_repo(extension_for_rules_oci, "distroless_cc")
use_repo(extension_for_rules_oci, "iptables_base")
use_repo(extension_for_rules_oci, "distroless_base_linux_amd64")
use_repo(extension_for_rules_oci, "iptables_base_single")
use_repo(extension_for_rules_oci, "distroless_cc_linux_amd64")
# End of extension `extension_for_rules_oci`
