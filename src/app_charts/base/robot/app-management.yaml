{{ if eq .Values.app_management "true" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chart-assignment-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: chart-assignment-controller
  template:
    metadata:
      labels:
        app: chart-assignment-controller
    spec:
      containers:
      - name: chart-assignment-controller
        image: {{ .Values.registry }}{{ .Values.images.chart_assignment_controller }}
        args:
        - "--cloud-cluster=false"
        - "--webhook-enabled={{ .Values.webhook.enabled }}"
        - "--webhook-port=9876"
        - "--cert-dir=/tls"
        - "--trace-stackdriver-project-id={{ .Values.project }}"
        env:
        - name: GOOGLE_CLOUD_PROJECT
          value: {{ .Values.project }}
        - name: ROBOT_NAME
          value: "{{ .Values.robot.name }}"
        ports:
        - name: webhook
          containerPort: 9876
        volumeMounts:
        - mountPath: /home/nonroot
          name: home
        - mountPath: /tls
          name: tls
      initContainers:
      # Run `helm init` to create client-side directories in $HOME/.helm which
      # some client library functionality expects to exist.
      - name: helm
        image: {{ .Values.registry }}{{ .Values.images.chart_assignment_controller }}
        command: ['/helm', 'init', '--client-only', '--stable-repo-url', 'https://k8s-at-home.com/charts']
        volumeMounts:
        - mountPath: /home/nonroot
          name: home
      volumes:
      - name: home
        emptyDir: {}
      - name: tls
        secret:
          secretName: chart-assignment-controller-tls
      securityContext:
        runAsUser: 65532
        runAsGroup: 65532
---
apiVersion: v1
kind: Secret
metadata:
  name: chart-assignment-controller-tls
  labels:
    cert-format: v2
type: kubernetes.io/tls
data:
  tls.key: {{ .Values.webhook.tls.key }}
  tls.crt: {{ .Values.webhook.tls.crt }}
---
apiVersion: v1
kind: Service
metadata:
  name: chart-assignment-controller
spec:
  type: ClusterIP
  ports:
  - port: 443
    protocol: TCP
    targetPort: webhook
  selector:
    app: chart-assignment-controller
---
{{ if eq .Values.webhook.enabled "true" }}
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: chart-assignment-controller
webhooks:
- name: chartassignments.apps.cloudrobotics.com
  failurePolicy: Fail
  clientConfig:
    service:
      namespace: {{ .Release.Namespace }}
      name: chart-assignment-controller
      path: /chartassignment/validate
    caBundle: {{ .Values.webhook.tls.crt }}
  rules:
  - apiGroups:
    - apps.cloudrobotics.com
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - chartassignments
{{ end }}
{{ end }}
