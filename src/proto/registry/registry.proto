// Copyright 2019 The Cloud Robotics Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package cloudrobotics.registry.v1alpha1;

option go_package = "src/proto/registry";

option java_multiple_files = true;
option java_package = "com.cloudrobotics.registry.v1alpha1";
option java_outer_classname = "RegistryProto";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "Cloud Robotics Registry gRPC API";
    description:
      "The registry is a core robot-agnostic API to organize common components "
      "in a cloud robotics installation.";
    version: "v1alpha1";
    contact: {
      email: "cloud-robotics-discuss@googlegroups.com";
      url: "https://github.com/googlecloudrobotics/core";
    };
    license: {
      name: "Apache 2.0";
      url: "http://www.apache.org/licenses/LICENSE-2.0.html";
    };
  };
};

/* Information about the robot model.
 *
 * RobotType contains shared information about a specific robot model.
 */
message RobotTypeSpec {
  // Manufacturer name of the robot.
  // Output only
  string make = 1;

  // Model name of the robot.
  // Output only
  string model = 2;

  // TODO(ensonic): consider more details, such as icons, urdf, ...
}

message RobotTypeStatus {
  // Types aren't actuated.
}

message RobotSpec {
  string type = 1;
  string project = 3;
}

enum RobotState {
  // Default value
  UNDEFINED = 0;

  // Reachable via network but not available due to
  // booting, paused or shutting down. Note that unavailability due to
  // activated emergency stop results in state EMERGENCY_STOP.
  UNAVAILABLE = 1;

  // Available for mission execution or in the process of executing missions.
  // Note that charging is a mission action which keeps the robot in state AVAILABLE.
  AVAILABLE = 2;

  // Triggered by pressing the emergency button *and/or* collision events.
  EMERGENCY_STOP = 3;

  // Unrecoverable error.
  ERROR = 4;
}


message RobotStatusCloud {
}

message RobotConfiguration {
  bool trolleyAttached = 1;
}

message RobotStatusRobot {
  google.protobuf.Timestamp updateTime = 2;
  RobotState state = 3;
  google.protobuf.Timestamp lastStateChangeTime = 4;
  float batteryPercentage = 5;

  bool emergencyStopButtonPressed = 6;
}

message RobotStatus {
  RobotStatusCloud cloud = 1;
  RobotStatusRobot robot = 2;
  RobotConfiguration configuration = 3;
}
